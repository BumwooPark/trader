// Code generated by MockGen. DO NOT EDIT.
// Source: ./eventlistener.go

// Package mock_event is a generated GoMock package.
package mock_event

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEventListener is a mock of EventListener interface
type MockEventListener struct {
	ctrl     *gomock.Controller
	recorder *MockEventListenerMockRecorder
}

// MockEventListenerMockRecorder is the mock recorder for MockEventListener
type MockEventListenerMockRecorder struct {
	mock *MockEventListener
}

// NewMockEventListener creates a new mock instance
func NewMockEventListener(ctrl *gomock.Controller) *MockEventListener {
	mock := &MockEventListener{ctrl: ctrl}
	mock.recorder = &MockEventListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventListener) EXPECT() *MockEventListenerMockRecorder {
	return m.recorder
}

// Listen mocks base method
func (m *MockEventListener) Listen(e interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Listen", e)
}

// Listen indicates an expected call of Listen
func (mr *MockEventListenerMockRecorder) Listen(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockEventListener)(nil).Listen), e)
}

// MockEventBroadcaster is a mock of EventBroadcaster interface
type MockEventBroadcaster struct {
	ctrl     *gomock.Controller
	recorder *MockEventBroadcasterMockRecorder
}

// MockEventBroadcasterMockRecorder is the mock recorder for MockEventBroadcaster
type MockEventBroadcasterMockRecorder struct {
	mock *MockEventBroadcaster
}

// NewMockEventBroadcaster creates a new mock instance
func NewMockEventBroadcaster(ctrl *gomock.Controller) *MockEventBroadcaster {
	mock := &MockEventBroadcaster{ctrl: ctrl}
	mock.recorder = &MockEventBroadcasterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventBroadcaster) EXPECT() *MockEventBroadcasterMockRecorder {
	return m.recorder
}

// BroadCast mocks base method
func (m *MockEventBroadcaster) BroadCast(e interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadCast", e)
}

// BroadCast indicates an expected call of BroadCast
func (mr *MockEventBroadcasterMockRecorder) BroadCast(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadCast", reflect.TypeOf((*MockEventBroadcaster)(nil).BroadCast), e)
}
