// Code generated by MockGen. DO NOT EDIT.
// Source: ./store.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	reflect "reflect"
	time "time"

	"github.com/gobenpark/trader/container"
	domain "github.com/gobenpark/trader/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Order mocks base method
func (m *MockStore) Order(code string, ot domain.OrderType, size int64, price float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", code, ot, size, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// Order indicates an expected call of Order
func (mr *MockStoreMockRecorder) Order(code, ot, size, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockStore)(nil).Order), code, ot, size, price)
}

// Cancel mocks base method
func (m *MockStore) Cancel(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockStoreMockRecorder) Cancel(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockStore)(nil).Cancel), id)
}

// LoadHistory mocks base method
func (m *MockStore) LoadHistory(ctx context.Context, code string, d time.Duration) ([]container.Candle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadHistory", ctx, code, d)
	ret0, _ := ret[0].([]container.Candle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadHistory indicates an expected call of LoadHistory
func (mr *MockStoreMockRecorder) LoadHistory(ctx, code, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadHistory", reflect.TypeOf((*MockStore)(nil).LoadHistory), ctx, code, d)
}

// LoadTick mocks base method
func (m *MockStore) LoadTick(ctx context.Context, code string) (<-chan container.Tick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTick", ctx, code)
	ret0, _ := ret[0].(<-chan container.Tick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTick indicates an expected call of LoadTick
func (mr *MockStoreMockRecorder) LoadTick(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTick", reflect.TypeOf((*MockStore)(nil).LoadTick), ctx, code)
}

// Uid mocks base method
func (m *MockStore) Uid() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uid")
	ret0, _ := ret[0].(string)
	return ret0
}

// Uid indicates an expected call of Uid
func (mr *MockStoreMockRecorder) Uid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uid", reflect.TypeOf((*MockStore)(nil).Uid))
}
