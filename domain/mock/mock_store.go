// Code generated by MockGen. DO NOT EDIT.
// Source: ./store.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/gobenpark/trader/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockStore) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel.
func (mr *MockStoreMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockStore)(nil).Cancel))
}

// Code mocks base method.
func (m *MockStore) Code() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code")
	ret0, _ := ret[0].(string)
	return ret0
}

// Code indicates an expected call of Code.
func (mr *MockStoreMockRecorder) Code() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockStore)(nil).Code))
}

// LoadHistory mocks base method.
func (m *MockStore) LoadHistory(ctx context.Context, d time.Duration) ([]domain.Candle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadHistory", ctx, d)
	ret0, _ := ret[0].([]domain.Candle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadHistory indicates an expected call of LoadHistory.
func (mr *MockStoreMockRecorder) LoadHistory(ctx, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadHistory", reflect.TypeOf((*MockStore)(nil).LoadHistory), ctx, d)
}

// LoadTick mocks base method.
func (m *MockStore) LoadTick(ctx context.Context) (<-chan domain.Tick, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTick", ctx)
	ret0, _ := ret[0].(<-chan domain.Tick)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTick indicates an expected call of LoadTick.
func (mr *MockStoreMockRecorder) LoadTick(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTick", reflect.TypeOf((*MockStore)(nil).LoadTick), ctx)
}

// Order mocks base method.
func (m *MockStore) Order() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Order")
}

// Order indicates an expected call of Order.
func (mr *MockStoreMockRecorder) Order() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockStore)(nil).Order))
}

// Uid mocks base method.
func (m *MockStore) Uid() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uid")
	ret0, _ := ret[0].(string)
	return ret0
}

// Uid indicates an expected call of Uid.
func (mr *MockStoreMockRecorder) Uid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uid", reflect.TypeOf((*MockStore)(nil).Uid))
}
