// Code generated by MockGen. DO NOT EDIT.
// Source: ./broker.go

// Package mock_broker is a generated GoMock package.
package mock_broker

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBroker is a mock of Broker interface
type MockBroker struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMockRecorder
}

// MockBrokerMockRecorder is the mock recorder for MockBroker
type MockBrokerMockRecorder struct {
	mock *MockBroker
}

// NewMockBroker creates a new mock instance
func NewMockBroker(ctrl *gomock.Controller) *MockBroker {
	mock := &MockBroker{ctrl: ctrl}
	mock.recorder = &MockBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBroker) EXPECT() *MockBrokerMockRecorder {
	return m.recorder
}

// Buy mocks base method
func (m *MockBroker) Buy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Buy")
}

// Buy indicates an expected call of Buy
func (mr *MockBrokerMockRecorder) Buy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buy", reflect.TypeOf((*MockBroker)(nil).Buy))
}

// Sell mocks base method
func (m *MockBroker) Sell() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sell")
}

// Sell indicates an expected call of Sell
func (mr *MockBrokerMockRecorder) Sell() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sell", reflect.TypeOf((*MockBroker)(nil).Sell))
}

// Cancel mocks base method
func (m *MockBroker) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel
func (mr *MockBrokerMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockBroker)(nil).Cancel))
}

// Submit mocks base method
func (m *MockBroker) Submit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Submit")
}

// Submit indicates an expected call of Submit
func (mr *MockBrokerMockRecorder) Submit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockBroker)(nil).Submit))
}

// GetPosition mocks base method
func (m *MockBroker) GetPosition() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPosition")
}

// GetPosition indicates an expected call of GetPosition
func (mr *MockBrokerMockRecorder) GetPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosition", reflect.TypeOf((*MockBroker)(nil).GetPosition))
}
