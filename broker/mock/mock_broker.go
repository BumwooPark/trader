// Code generated by MockGen. DO NOT EDIT.
// Source: ./broker.go

// Package mock_broker is a generated GoMock package.
package mock_broker

import (
	event "github.com/gobenpark/trader/event"
	order "github.com/gobenpark/trader/order"
	position "github.com/gobenpark/trader/position"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBroker is a mock of Broker interface
type MockBroker struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMockRecorder
}

// MockBrokerMockRecorder is the mock recorder for MockBroker
type MockBrokerMockRecorder struct {
	mock *MockBroker
}

// NewMockBroker creates a new mock instance
func NewMockBroker(ctrl *gomock.Controller) *MockBroker {
	mock := &MockBroker{ctrl: ctrl}
	mock.recorder = &MockBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBroker) EXPECT() *MockBrokerMockRecorder {
	return m.recorder
}

// Buy mocks base method
func (m *MockBroker) Buy(code string, size int64, price float64, exec order.ExecType) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buy", code, size, price, exec)
	ret0, _ := ret[0].(string)
	return ret0
}

// Buy indicates an expected call of Buy
func (mr *MockBrokerMockRecorder) Buy(code, size, price, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buy", reflect.TypeOf((*MockBroker)(nil).Buy), code, size, price, exec)
}

// Sell mocks base method
func (m *MockBroker) Sell(code string, size int64, price float64, exec order.ExecType) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sell", code, size, price, exec)
	ret0, _ := ret[0].(string)
	return ret0
}

// Sell indicates an expected call of Sell
func (mr *MockBrokerMockRecorder) Sell(code, size, price, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sell", reflect.TypeOf((*MockBroker)(nil).Sell), code, size, price, exec)
}

// Cancel mocks base method
func (m *MockBroker) Cancel(uuid string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel", uuid)
}

// Cancel indicates an expected call of Cancel
func (mr *MockBrokerMockRecorder) Cancel(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockBroker)(nil).Cancel), uuid)
}

// Submit mocks base method
func (m *MockBroker) Submit(uid string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Submit", uid)
}

// Submit indicates an expected call of Submit
func (mr *MockBrokerMockRecorder) Submit(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockBroker)(nil).Submit), uid)
}

// GetPosition mocks base method
func (m *MockBroker) GetPosition(code string) ([]position.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosition", code)
	ret0, _ := ret[0].([]position.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosition indicates an expected call of GetPosition
func (mr *MockBrokerMockRecorder) GetPosition(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosition", reflect.TypeOf((*MockBroker)(nil).GetPosition), code)
}

// AddOrderHistory mocks base method
func (m *MockBroker) AddOrderHistory() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOrderHistory")
}

// AddOrderHistory indicates an expected call of AddOrderHistory
func (mr *MockBrokerMockRecorder) AddOrderHistory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderHistory", reflect.TypeOf((*MockBroker)(nil).AddOrderHistory))
}

// SetCash mocks base method
func (m *MockBroker) SetCash(cash int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCash", cash)
}

// SetCash indicates an expected call of SetCash
func (mr *MockBrokerMockRecorder) SetCash(cash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCash", reflect.TypeOf((*MockBroker)(nil).SetCash), cash)
}

// SetEventBroadCaster mocks base method
func (m *MockBroker) SetEventBroadCaster(e event.Broadcaster) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEventBroadCaster", e)
}

// SetEventBroadCaster indicates an expected call of SetEventBroadCaster
func (mr *MockBrokerMockRecorder) SetEventBroadCaster(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventBroadCaster", reflect.TypeOf((*MockBroker)(nil).SetEventBroadCaster), e)
}
